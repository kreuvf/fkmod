diff --git a/src/combat.cpp b/src/combat.cpp
index 83e29e7..2324a40 100644
--- a/src/combat.cpp
+++ b/src/combat.cpp
@@ -424,13 +424,7 @@ int32_t objDamage(BASE_OBJECT *psObj, unsigned damage, unsigned originalhp, WEAP
 
 	if (isDamagePerSecond)
 	{
-		int deltaDamageRate = actualDamage - psObj->periodicalDamage;
-		if (deltaDamageRate <= 0)
-		{
-			return 0;  // Did this much damage already, this tick, so don't do more.
-		}
-		actualDamage = gameTimeAdjustedAverage(deltaDamageRate);
-		psObj->periodicalDamage += deltaDamageRate;
+		actualDamage = gameTimeAdjustedAverage(actualDamage);
 	}
 
 	objTrace(psObj->id, "objDamage: Penetrated %d", actualDamage);
diff --git a/src/droid.cpp b/src/droid.cpp
index 359bdcb..5828868 100644
--- a/src/droid.cpp
+++ b/src/droid.cpp
@@ -890,23 +890,6 @@ void droidUpdate(DROID *psDroid)
 		droidUpdateDroidSelfRepair(psDroid);
 	}
 
-	/* Update the fire damage data */
-	if (psDroid->periodicalDamageStart != 0 && psDroid->periodicalDamageStart != gameTime - deltaGameTime)  // -deltaGameTime, since projectiles are updated after droids.
-	{
-		// The periodicalDamageStart has been set, but is not from the previous tick, so we must be out of the fire.
-		psDroid->periodicalDamage = 0;  // Reset periodical damage done this tick.
-		if (psDroid->periodicalDamageStart + BURN_TIME < gameTime)
-		{
-			// Finished periodical damaging.
-			psDroid->periodicalDamageStart = 0;
-		}
-		else
-		{
-			// do hardcoded burn damage (this damage automatically applied after periodical damage finished)
-			droidDamage(psDroid, BURN_DAMAGE, WC_HEAT, WSC_FLAME, gameTime - deltaGameTime / 2 + 1, true, BURN_MIN_DAMAGE);
-		}
-	}
-
 	// At this point, the droid may be dead due to periodical damage or hardcoded burn damage.
 	if (isDead((BASE_OBJECT *)psDroid))
 	{
diff --git a/src/projectile.cpp b/src/projectile.cpp
index 52677f7..787ec93 100644
--- a/src/projectile.cpp
+++ b/src/projectile.cpp
@@ -1317,6 +1317,13 @@ void PROJECTILE::update()
 
 	case PROJ_INACTIVE:
 		psObj->died = psObj->time;
+		if (!psObj->burnVictims.empty())
+		{
+			for(std::list<BASE_OBJECT *>::iterator it = psObj->burnVictims.begin(); it != psObj->burnVictims.end(); it++)
+			{
+				(*it)->periodicalDamageStart = 0;
+			}
+		}
 		break;
 	}
 
@@ -1348,11 +1355,26 @@ static void proj_checkPeriodicalDamage(PROJECTILE *psProj)
 
 	WEAPON_STATS *psStats = psProj->psWStats;
 
+	BASE_OBJECT* psCurr;
+
+	if (!psProj->burnVictims.empty())
+	{
+		for (std::list<BASE_OBJECT *>::iterator it = psProj->burnVictims.begin(); it != psProj->burnVictims.end(); it++)
+		{
+			psCurr = *it;
+			if(isDead(psCurr))
+			{
+				psProj->burnVictims.erase(it);
+				break;	// needed, because we are not resetting the iterator
+			}
+		}
+	}
+
 	static GridList gridList;  // static to avoid allocations.
 	gridList = gridStartIterate(psProj->pos.x, psProj->pos.y, psStats->upgrade[psProj->player].periodicalDamageRadius);
 	for (GridIterator gi = gridList.begin(); gi != gridList.end(); ++gi)
 	{
-		BASE_OBJECT *psCurr = *gi;
+		psCurr = *gi;
 		if (psCurr->died)
 		{
 			continue;  // Do not damage dead objects further.
@@ -1380,13 +1402,35 @@ static void proj_checkPeriodicalDamage(PROJECTILE *psProj)
 			psCurr->periodicalDamageStart = gameTime;
 			psCurr->periodicalDamage = 0;  // Reset periodical damage done this tick.
 		}
-		unsigned damageRate = calcDamage(weaponPeriodicalDamage(psStats, psProj->player), psStats->periodicalDamageWeaponEffect, psCurr);
-		debug(LOG_NEVER, "Periodical damage of %d per second to object %d, player %d\n", damageRate, psCurr->id, psCurr->player);
 
-		int relativeDamage = objectDamage(psCurr, damageRate, psStats->periodicalDamageWeaponClass,
-		                                  psStats->periodicalDamageWeaponSubClass, gameTime - deltaGameTime / 2 + 1, true,
-		                                  psStats->upgrade[psProj->player].minimumDamage);
-		proj_UpdateKills(psProj, relativeDamage);
+		if (psProj->burnVictims.empty())
+		{
+			psProj->burnVictims.push_front(psCurr);
+		} else {
+			for (std::list<BASE_OBJECT *>::iterator it = psProj->burnVictims.begin(); it != psProj->burnVictims.end(); it++)
+			{
+				if (psCurr == *it)
+				{
+					break;
+				} else if (*it == psProj->burnVictims.back()) {
+					psProj->burnVictims.push_back(psCurr);
+					break;
+				}
+			}
+		}
+	}
+	unsigned damageRate = weaponPeriodicalDamage(psStats,psProj->player);
+
+	int relativeDamage;
+	
+	if (!psProj->burnVictims.empty())
+	{
+		for (std::list<BASE_OBJECT *>::iterator it = psProj->burnVictims.begin(); it != psProj->burnVictims.end(); it++)
+		{
+			psCurr = *it;
+			relativeDamage = objectDamage(psCurr, damageRate, psStats->periodicalDamageWeaponClass, psStats->periodicalDamageWeaponSubClass, gameTime - deltaGameTime/2 + 1, true, psStats->upgrade[psProj->player].minimumDamage);
+			proj_UpdateKills(psProj, relativeDamage);
+		}
 	}
 }
 
diff --git a/src/projectile.h b/src/projectile.h
index 3a04ff9..b7e1d9b 100644
--- a/src/projectile.h
+++ b/src/projectile.h
@@ -38,9 +38,6 @@ extern	BASE_OBJECT	*g_pProjLastAttacker;	///< The last unit that did damage - us
 #define PROJ_MAX_PITCH  45
 #define PROJ_ULTIMATE_PITCH  80
 
-#define BURN_TIME	10000	///< How long an object burns for after leaving a fire.
-#define BURN_DAMAGE	15	///< How much damage per second an object takes when it is burning.
-#define BURN_MIN_DAMAGE	30	///< Least percentage of damage an object takes when burning.
 #define ACC_GRAVITY	1000	///< Downward force against projectiles.
 
 /** How long to display a single electronic warfare shimmmer. */
diff --git a/src/projectiledef.h b/src/projectiledef.h
index d2a9477..61dbece 100644
--- a/src/projectiledef.h
+++ b/src/projectiledef.h
@@ -28,6 +28,7 @@
 #include "lib/gamelib/gtime.h"
 
 #include <vector>
+#include <list>
 
 
 enum PROJ_STATE
@@ -59,6 +60,7 @@ struct PROJECTILE : public SIMPLE_OBJECT
 	BASE_OBJECT    *psSource;               ///< what fired the projectile
 	BASE_OBJECT    *psDest;                 ///< target of this projectile
 	std::vector<BASE_OBJECT *> psDamaged;   ///< the targets that have already been dealt damage to (don't damage the same target twice)
+	std::list<BASE_OBJECT *> burnVictims; ///< CPP linked list with the projectile's burn victims
 
 	Vector3i        src;                    ///< Where projectile started
 	Vector3i        dst;                    ///< The target coordinates
